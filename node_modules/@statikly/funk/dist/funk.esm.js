import React, { useState, useMemo, createContext, useContext, useRef, useEffect, useCallback } from 'react';
import { useSwipeable } from 'react-swipeable';
import { useUID } from 'react-uid';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Direction;

(function (Direction) {
  Direction[Direction["HORIZONTAL"] = 0] = "HORIZONTAL";
  Direction[Direction["VERTICAL"] = 1] = "VERTICAL";
})(Direction || (Direction = {}));

var TabContext = /*#__PURE__*/createContext({
  id: 'Please provide a unique id',
  activeTab: 0,
  numTabs: 0,
  setActiveTab: function setActiveTab() {},
  direction: Direction.HORIZONTAL
});
function useTab(index) {
  var _useContext = useContext(TabContext),
      activeTab = _useContext.activeTab;

  return {
    isActive: activeTab === index
  };
}
function TabGroup(_ref) {
  var _ref$initialActiveTab = _ref.initialActiveTab,
      initialActiveTab = _ref$initialActiveTab === void 0 ? 0 : _ref$initialActiveTab,
      numTabs = _ref.numTabs,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? Direction.HORIZONTAL : _ref$direction,
      children = _ref.children;
  var id = useUID();

  var _useState = useState(initialActiveTab),
      activeTab = _useState[0],
      setActiveTab = _useState[1];

  var value = useMemo(function () {
    return {
      id: id,
      activeTab: activeTab,
      setActiveTab: setActiveTab,
      numTabs: numTabs,
      direction: direction
    };
  }, [activeTab, setActiveTab, numTabs, direction]);
  return React.createElement(TabContext.Provider, {
    value: value
  }, children);
}
function Tab(_ref2) {
  var index = _ref2.index,
      className = _ref2.className,
      activeClassName = _ref2.activeClassName,
      inactiveClassName = _ref2.inactiveClassName,
      _ref2$trigger = _ref2.trigger,
      trigger = _ref2$trigger === void 0 ? 'click' : _ref2$trigger,
      props = _objectWithoutPropertiesLoose(_ref2, ["index", "className", "activeClassName", "inactiveClassName", "trigger"]);

  var _useContext2 = useContext(TabContext),
      id = _useContext2.id,
      activeTab = _useContext2.activeTab,
      setActiveTab = _useContext2.setActiveTab;

  var tabRef = useRef();
  useEffect(function () {
    if (activeTab === index) {
      var _tabRef$current;

      (_tabRef$current = tabRef.current) == null ? void 0 : _tabRef$current.focus();
    }
  }, [activeTab, index]);
  var calculatedClassName = useMemo(function () {
    return [className, activeTab === index ? activeClassName : inactiveClassName].join(' ');
  }, [className, activeClassName, inactiveClassName, activeTab, index]);
  var interactionProps = useMemo(function () {
    var interactions = {};

    interactions.onClick = function () {
      return setActiveTab(index);
    };

    if (trigger === 'hover') {
      interactions.onMouseEnter = function () {
        return setActiveTab(index);
      };
    }

    return interactions;
  }, [trigger, setActiveTab, index]);
  return React.createElement("button", Object.assign({
    ref: tabRef,
    role: "tab",
    "aria-controls": id + "-" + index,
    "aria-selected": activeTab === index,
    tabIndex: activeTab === index ? 0 : -1,
    className: calculatedClassName
  }, interactionProps, props));
}
function TabPanel(_ref3) {
  var _ref3$as = _ref3.as,
      Component = _ref3$as === void 0 ? 'div' : _ref3$as,
      index = _ref3.index,
      className = _ref3.className,
      activeClassName = _ref3.activeClassName,
      inactiveClassName = _ref3.inactiveClassName,
      _ref3$swipeable = _ref3.swipeable,
      swipeable = _ref3$swipeable === void 0 ? false : _ref3$swipeable,
      props = _objectWithoutPropertiesLoose(_ref3, ["as", "index", "className", "activeClassName", "inactiveClassName", "swipeable"]);

  var _useContext3 = useContext(TabContext),
      id = _useContext3.id,
      activeTab = _useContext3.activeTab,
      setActiveTab = _useContext3.setActiveTab,
      numTabs = _useContext3.numTabs;

  var onSwiped = useCallback(function (e) {
    if (swipeable) {
      if (e.dir === 'Right') {
        var previous = activeTab - 1 >= 0 ? activeTab - 1 : numTabs - 1;
        setActiveTab(previous);
      }

      if (e.dir === 'Left') {
        var next = activeTab + 1 < numTabs ? activeTab + 1 : 0;
        setActiveTab(next);
      }
    }
  }, [swipeable, numTabs, activeTab, setActiveTab]);
  var handlers = useSwipeable({
    onSwiped: onSwiped
  });
  var calculatedClassName = useMemo(function () {
    return [className, activeTab === index ? activeClassName : inactiveClassName].join(' ');
  }, [className, activeClassName, inactiveClassName, activeTab, index]);
  return (// @ts-ignore
    React.createElement(Component, Object.assign({
      style: _extends({}, props.style, {
        visibility: activeTab === index ? 'visible' : 'hidden'
      }),
      id: id + "-" + index,
      role: "tabpanel",
      disabled: activeTab !== index,
      "aria-expanded": activeTab === index,
      className: calculatedClassName
    }, handlers, props))
  );
}
function TabList(_ref4) {
  var _ref4$as = _ref4.as,
      Component = _ref4$as === void 0 ? 'div' : _ref4$as,
      props = _objectWithoutPropertiesLoose(_ref4, ["as"]);

  var tabListRef = useRef();

  var _useContext4 = useContext(TabContext),
      setActiveTab = _useContext4.setActiveTab,
      numTabs = _useContext4.numTabs,
      activeTab = _useContext4.activeTab,
      direction = _useContext4.direction;

  var handleKeyUp = useCallback(function (e) {
    var actions = {
      End: function End() {
        setActiveTab(numTabs - 1);
      },
      Home: function Home() {
        setActiveTab(0);
      }
    };

    if (direction === Direction.HORIZONTAL) {
      actions.ArrowLeft = function () {
        var previous = activeTab - 1 >= 0 ? activeTab - 1 : numTabs - 1;
        setActiveTab(previous);
      };

      actions.ArrowRight = function () {
        var next = activeTab + 1 < numTabs ? activeTab + 1 : 0;
        setActiveTab(next);
      };
    }

    if (direction === Direction.VERTICAL) {
      actions.ArrowUp = function () {
        var previous = activeTab - 1 >= 0 ? activeTab - 1 : numTabs - 1;
        setActiveTab(previous);
      };

      actions.ArrowDown = function () {
        var next = activeTab + 1 < numTabs ? activeTab + 1 : 0;
        setActiveTab(next);
      };
    }

    var action = actions[e.key];

    if (action) {
      e.preventDefault();
      action();
    }
  }, [setActiveTab, activeTab, numTabs, direction]);
  useEffect(function () {
    tabListRef.current.addEventListener('keyup', handleKeyUp);
    return function () {
      var _tabListRef$current;

      return (_tabListRef$current = tabListRef.current) == null ? void 0 : _tabListRef$current.removeEventListener('keyup', handleKeyUp);
    };
  }, [handleKeyUp]); // @ts-ignore

  return React.createElement(Component, Object.assign({
    ref: tabListRef,
    role: "tablist"
  }, props));
}
TabGroup.Tab = Tab;
TabGroup.TabPanel = TabPanel;
TabGroup.TabList = TabList;
TabGroup.useTab = useTab;
TabGroup.direction = Direction;

export { TabGroup };
//# sourceMappingURL=funk.esm.js.map
